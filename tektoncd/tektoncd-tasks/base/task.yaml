---
apiVersion: tekton.dev/v1alpha1
kind: Task
metadata:
  name: build-kfctl-image-from-git-source
spec:
  inputs:
    resources:
    - name: docker-source
      type: git
    params:
    - name: pathToDockerFile
      type: string
      description: The path to the dockerfile to build
      default: /workspace/docker-source/Dockerfile
    - name: pathToContext
      type: string
      description:
        The build context used by Kaniko
        (https://github.com/GoogleContainerTools/kaniko#kaniko-build-contexts)
      default: /workspace/docker-source
  outputs:
    resources:
    - name: builtImage
      type: image
      outputImageDir: /workspace/builtImage
  steps:
  - name: build-and-push
    image: gcr.io/kaniko-project/executor:v0.10.0
    command:
    - /kaniko/executor
    env:
    - name: GOOGLE_APPLICATION_CREDENTIALS
      value: /secret/kaniko-secret.json
    args: ["--dockerfile=${inputs.params.pathToDockerFile}",
           "--destination=${outputs.resources.builtImage.url}",
           "--context=${inputs.params.pathToContext}",
           "--target=kfctl_base"]
    volumeMounts:
    - name: kaniko-secret
      mountPath: /secret
  volumes:
  - name: kaniko-secret
    secret:
      secretName: kaniko-secret
---
apiVersion: tekton.dev/v1alpha1
kind: Task
metadata:
  name: deploy-using-kfctl
spec:
  inputs:
    resources:
    - name: image
      type: image
    params:
    - name: app_dir
      type: string
      description: where to create the kf app
    - name: configPath
      type: string
      description: url for config arg
    - name: project
      type: string
      description: name of project
    - name: zone
      type: string
      description: zone of project
  steps:
  - name: kfctl-init
    image: "${inputs.resources.image.url}"
    command: ["/usr/local/bin/kfctl"]
    args:
    - "init"
    - "--config"
    - "${inputs.params.configPath}"
    - "--project"
    - "${inputs.params.project}"
    - "${inputs.params.app_dir}"
    env:
    - name: GOOGLE_APPLICATION_CREDENTIALS
      value: /secret/kaniko-secret.json
    volumeMounts:
    - name: kaniko-secret
      mountPath: /secret
    - name: kubeflow
      mountPath: /kubeflow
    imagePullPolicy: Always
  - name: kfctl-generate
    image: "${inputs.resources.image.url}"
    imagePullPolicy: Always
    workingDir: "${inputs.params.app_dir}"
    command: ["/usr/local/bin/kfctl"]
    args:
    - "generate"
    - "all"
    - "--zone"
    - "${inputs.params.zone}"
    env:
    - name: GOOGLE_APPLICATION_CREDENTIALS
      value: /secret/kaniko-secret.json
    - name: CLIENT_ID
      valueFrom:
        secretKeyRef:
          name: client-secret
          key: CLIENT_ID
    - name: CLIENT_SECRET
      valueFrom:
        secretKeyRef:
          name: client-secret
          key: CLIENT_SECRET
  - name: kfctl-apply
    image: "${inputs.resources.image.url}"
    imagePullPolicy: Always
    workingDir: "${inputs.params.app_dir}"
    command: ["/usr/local/bin/kfctl"]
    args:
    - "apply"
    - "all"
    - "--verbose"
    env:
    - name: GOOGLE_APPLICATION_CREDENTIALS
      value: /secret/kaniko-secret.json
    - name: CLIENT_ID
      valueFrom:
        secretKeyRef:
          name: client-secret
          key: CLIENT_ID
    - name: CLIENT_SECRET
      valueFrom:
        secretKeyRef:
          name: client-secret
          key: CLIENT_SECRET
    volumeMounts:
    - name: kaniko-secret
      mountPath: /secret
    - name: kubeflow
      mountPath: /kubeflow
  volumes:
  - name: kaniko-secret
    secret:
      secretName: kaniko-secret
  - name: kubeflow
    persistentVolumeClaim:
      claimName: kubeflow-pvc
---
