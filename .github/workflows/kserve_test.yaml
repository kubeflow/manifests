name: Test KServe
on:
  pull_request:
    paths:
    - tests/gh-actions/install_KinD_create_KinD_cluster_install_kustomize.sh
    - .github/workflows/kserve_m2m_test.yaml
    - apps/kserve/**
    - tests/gh-actions/install_kserve.sh
    - common/istio*/**
    - tests/gh-actions/install_istio*.sh
    - common/oauth2-proxy/**
    - tests/gh-actions/install_oauth2-proxy.sh
    - common/cert-manager/**
    - tests/gh-actions/install_cert_manager.sh
    - common/knative/**
    - tests/gh-actions/install_knative*.sh

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Install KinD, Create KinD cluster and Install kustomize
      run: ./tests/gh-actions/install_KinD_create_KinD_cluster_install_kustomize.sh

    - name: Install kubectl
      run: ./tests/gh-actions/install_kubectl.sh

    - name: Install Istio CNI
      run: ./tests/gh-actions/install_istio-cni.sh

    - name: Install oauth2-proxy
      run: ./tests/gh-actions/install_oauth2-proxy.sh

    - name: Install cert-manager
      run: ./tests/gh-actions/install_cert_manager.sh

    - name: Create kubeflow namespace
      run: kustomize build common/kubeflow-namespace/base | kubectl apply -f -

    - name: Install knative CNI
      run: ./tests/gh-actions/install_knative-cni.sh

    - name: Apply cluster-local-gateway overlays with oauth2-proxy  # The overlay we are applying
      run: kustomize build common/istio-1-24/cluster-local-gateway/overlays/oauth2-proxy/ | kubectl apply -f -

    - name: Install KServe
      run: ./tests/gh-actions/install_kserve.sh

    - name: Install KF Multi Tenancy
      run: ./tests/gh-actions/install_multi_tenancy.sh

    - name: Install kubeflow-istio-resources
      run: kustomize build common/istio-1-24/kubeflow-istio-resources/base | kubectl apply -f -

    - name: Create KF Profile
      run: ./tests/gh-actions/install_kubeflow_profile.sh

    - name: Deploy InferenceService  # Any inference Service
      run: |
        cat <<EOF | kubectl apply -f -
        apiVersion: "serving.kserve.io/v1beta1"
        kind: "InferenceService"
        metadata:
          name: "isvc-sklearn"
          namespace: kubeflow-user-example-com
        spec:
          predictor:
            sklearn:
              storageUri: "gs://kfserving-examples/models/sklearn/1.0/model"
        EOF

        # Wait for the InferenceService to be ready
        kubectl wait --for=condition=Ready inferenceservice isvc-sklearn -n kubeflow-user-example-com --timeout=300s

        # Verify what knative service was created
        echo "=== KServe Predictor Service Details ==="
        kubectl get ksvc -n kubeflow-user-example-com -l serving.kserve.io/inferenceservice=isvc-sklearn

    - name: Diagnose KServe Service Labels
      run: |
        echo "=== KServe Predictor Service Labels ==="
        kubectl get pods -n kubeflow-user-example-com -l serving.knative.dev/service=isvc-sklearn-predictor --show-labels

    # Allow everything, since principals are stripped off so cant control via sources, namespaces we will handle that at gateway level
    - name: Apply open AuthorizationPolicy for the KServe service
      run: |
        cat <<EOF | kubectl apply -f -
        apiVersion: security.istio.io/v1beta1
        kind: AuthorizationPolicy
        metadata:
          name: isvc-sklearn-predictor-allow
          namespace: kubeflow-user-example-com
        spec:
          selector:
            matchLabels:
              serving.knative.dev/service: isvc-sklearn-predictor
          action: ALLOW
          rules:
          - {}
        EOF

    # Path Based
    - name: Add KServe path-based routing for external access
      run: |
        cat <<EOF | kubectl apply -f -
        apiVersion: networking.istio.io/v1beta1
        kind: VirtualService
        metadata:
          name: isvc-sklearn-external
          namespace: kubeflow-user-example-com
        spec:
          gateways:
            - kubeflow/kubeflow-gateway
          hosts:
            - '*'
          http:
            - match:
                - uri:
                    prefix: /kserve/kubeflow-user-example-com/isvc-sklearn/
              rewrite:
                uri: /
              route:
                - destination:
                    host: knative-local-gateway.istio-system.svc.cluster.local
                  headers:
                    request:
                      set:
                        Host: isvc-sklearn-predictor.kubeflow-user-example-com.svc.cluster.local
                  weight: 100
              timeout: 300s
        EOF

    - name: Setup python 3.12
      uses: actions/setup-python@v4
      with:
        python-version: 3.12

    - name: Install test dependencies
      run: pip install -r ./apps/kserve/tests/requirements.txt

    - name: Port forward
      run: ./tests/gh-actions/port_forward_gateway.sh

    - name: Verify CNI is being used instead of init containers
      run: |
        INIT_CONTAINERS=$(kubectl get pods -A -o jsonpath='{range .items[*]}{.metadata.name}{"\n"}{range .spec.initContainers[*]}{.name}{"\n"}{end}{"\n"}{end}' | grep istio-init || echo "none")
        if [[ "$INIT_CONTAINERS" != "none" ]]; then
          echo "Error: Found istio-init containers, CNI is not being used properly"
          echo "$INIT_CONTAINERS"
          exit 1
        else
          echo "Success: No istio-init containers found, CNI is working correctly"
        fi

    # Test 1: External access with valid token from correct namespace, Must Pass
    - name: Test external access with valid token
      run: |
        export KSERVE_INGRESS_HOST_PORT=localhost:8080
        export KSERVE_M2M_TOKEN="$(kubectl -n kubeflow-user-example-com create token default-editor)"

        RESPONSE=$(curl -s -w "%{http_code}" \
          -H "Host: isvc-sklearn-predictor.kubeflow-user-example-com.example.com" \
          -H "Authorization: Bearer ${KSERVE_M2M_TOKEN}" \
          -H "Content-Type: application/json" \
          "http://${KSERVE_INGRESS_HOST_PORT}/v1/models/isvc-sklearn:predict" \
          -d '{"instances": [[6.8, 2.8, 4.8, 1.4]]}')

        HTTP_CODE=${RESPONSE: -3}
        RESPONSE_BODY=${RESPONSE:0:${#RESPONSE}-3}

        if [[ "$HTTP_CODE" == "200" && "$RESPONSE_BODY" == *"predictions"* ]]; then
          echo "Test passed: Valid token access successful with code $HTTP_CODE"
        else
          echo "Test failed: Valid token access returned $HTTP_CODE"
          echo "Response: $RESPONSE_BODY"
          exit 1
        fi

    # Test 2: External access without token, Must Fail, Redirects to login page
    - name: Test external access without token
      run: |
        export KSERVE_INGRESS_HOST_PORT=localhost:8080

        RESPONSE=$(curl -s -o /dev/null -w "%{http_code}" \
          -H "Host: isvc-sklearn-predictor.kubeflow-user-example-com.example.com" \
          -H "Content-Type: application/json" \
          "http://${KSERVE_INGRESS_HOST_PORT}/v1/models/isvc-sklearn:predict" \
          -d '{"instances": [[6.8, 2.8, 4.8, 1.4]]}')

        if [[ "$RESPONSE" == "403" ]]; then
          echo "Test passed: Unauthenticated request correctly rejected with $RESPONSE"
        else
          echo "Test failed: Unauthenticated request returned $RESPONSE instead of 403"
          exit 1
        fi

    # Test 3: External access with token from unauthorized namespace, Must Fail
    - name: Test external access with token from unauthorized namespace
      run: |
        export KSERVE_INGRESS_HOST_PORT=localhost:8080

        # Create attacker namespace and service account
        kubectl create ns kubeflow-user-example-com-attacker
        kubectl create serviceaccount attacker-sa -n kubeflow-user-example-com-attacker
        export ATTACKER_TOKEN="$(kubectl -n kubeflow-user-example-com-attacker create token attacker-sa)"

        RESPONSE=$(curl -s -o /dev/null -w "%{http_code}" \
          -H "Host: isvc-sklearn-predictor.kubeflow-user-example-com.example.com" \
          -H "Authorization: Bearer ${ATTACKER_TOKEN}" \
          -H "Content-Type: application/json" \
          "http://${KSERVE_INGRESS_HOST_PORT}/v1/models/isvc-sklearn:predict" \
          -d '{"instances": [[6.8, 2.8, 4.8, 1.4]]}')

        if [[ "$RESPONSE" == "403" ]]; then
          echo "Test passed: Unauthorized namespace token correctly rejected with $RESPONSE"
        else
          echo "Test failed: Unauthorized namespace token returned $RESPONSE instead of 403"
          exit 1
        fi

    # Test 4: Add unauthorized namespace to policy and test again, Must Pass
    - name: Add unauthorized namespace to policy and test again
      run: |
        export KSERVE_INGRESS_HOST_PORT=localhost:8080

        # Update the cluster-local-gateway AuthorizationPolicy to allow attacker namespace
        kubectl apply -f - <<EOF
        apiVersion: security.istio.io/v1
        kind: AuthorizationPolicy
        metadata:
          name: cluster-local-gateway
          namespace: istio-system
        spec:
          selector:
            matchLabels:
              app: cluster-local-gateway
              istio: cluster-local-gateway
          action: ALLOW
          rules:
          - to:
            - operation:
                hosts: ["*.kubeflow-user-example-com.svc.cluster.local"]
            when:
            - key: request.headers[kubeflow-userid]
              values:
                - "system:serviceaccount:kubeflow-user-example-com:*"
                - "system:serviceaccount:attacker-namespace:*"
          - to:
            - operation:
                hosts: ["*.kubeflow-user-example-com.svc.cluster.local"]
            when:
            - key: request.auth.claims[sub]
              values:
                - "system:serviceaccount:kubeflow-user-example-com:*"
          - to:
            - operation:
                paths: ["/healthz", "/metrics", "/wait-for-drain"]
        EOF

        # Ensure policy is applied
        sleep 5

        # Try with attacker token again
        export ATTACKER_TOKEN="$(kubectl -n kubeflow-user-example-com-attacker create token attacker-sa)"

        RESPONSE=$(curl -s -w "%{http_code}" \
          -H "Hostisauthenticated.com" \
          -H "Host: isvc-sklearn-predictor.kubeflow-user-example-com.example.com" \
          -H "Authorization: Bearer ${ATTACKER_TOKEN}" \
          -H "Content-Type: application/json" \
          "http://${KSERVE_INGRESS_HOST_PORT}/v1/models/isvc-sklearn:predict" \
          -d '{"instances": [[6.8, 2.8, 4.8, 1.4]]}')

        HTTP_CODE=${RESPONSE: -3}
        RESPONSE_BODY=${RESPONSE:0:${#RESPONSE}-3}

        if [[ "$HTTP_CODE" == "200" && "$RESPONSE_BODY" == *"predictions"* ]]; then
          echo "Test passed: Previously unauthorized token now works with code $HTTP_CODE"
        else
          echo "Test failed: Previously unauthorized token still doesn't work with code $HTTP_CODE"
          echo "Response: $RESPONSE_BODY"
          exit 1
        fi

        # Restore original policy
        kubectl apply -f - <<EOF
        apiVersion: security.istio.io/v1
        kind: AuthorizationPolicy
        metadata:
          name: cluster-local-gateway
          namespace: istio-system
        spec:
          selector:
            matchLabels:
              app: cluster-local-gateway
              istio: cluster-local-gateway
          action: ALLOW
          rules:
          - to:
            - operation:
                hosts: ["*.kubeflow-user-example-com.svc.cluster.local"]
            when:
            - key: request.headers[kubeflow-userid]
              values: ["system:serviceaccount:kubeflow-user-example-com:*"]
          - to:
            - operation:
                hosts: ["*.kubeflow-user-example-com.svc.cluster.local"]
            when:
            - key: request.auth.claims[sub]
              values: ["system:serviceaccount:kubeflow-user-example-com:*"]
          - to:
            - operation:
                paths: ["/healthz", "/metrics", "/wait-for-drain"]
        EOF

    # Test 5: Internal access with token from same namespace
    - name: Test internal access with token from same namespace
      run: |
        # Create a pod in the same namespace to test internal access
        kubectl run -n kubeflow-user-example-com curl-test --image=curlimages/curl --restart=Never -- sleep 3600

        # Wait for the pod to be ready
        kubectl wait --for=condition=ready pod/curl-test -n kubeflow-user-example-com --timeout=60s

        # Run test from inside the pod with token
        RESULT=$(kubectl exec -n kubeflow-user-example-com curl-test -- \
          curl -s -w "\n%{http_code}" \
          -H "Authorization: Bearer $(cat /var/run/secrets/kubernetes.io/serviceaccount/token)" \
          -H "Content-Type: application/json" \
          "http://isvc-sklearn-predictor.kubeflow-user-example-com.svc.cluster.local/v1/models/isvc-sklearn:predict" \
          -d '{"instances": [[6.8, 2.8, 4.8, 1.4]]}')

        HTTP_CODE=$(echo "$RESULT" | tail -n1)
        RESPONSE_BODY=$(echo "$RESULT" | head -n1)

        if [[ "$HTTP_CODE" == "200" && "$RESPONSE_BODY" == *"predictions"* ]]; then
          echo "Test passed: Internal access with token successful with code $HTTP_CODE"
        else
          echo "Test failed: Internal access with token returned $HTTP_CODE"
          echo "Response: $RESPONSE_BODY"
          exit 1
        fi

    # Test 6: Internal access without token
    - name: Test internal access without token
      run: |
        # Run test from inside the pod without token
        RESULT=$(kubectl exec -n kubeflow-user-example-com curl-test -- \
          curl -s -o /dev/null -w "%{http_code}" \
          -H "Content-Type: application/json" \
          "http://isvc-sklearn-predictor.kubeflow-user-example-com.svc.cluster.local/v1/models/isvc-sklearn:predict" \
          -d '{"instances": [[6.8, 2.8, 4.8, 1.4]]}')

        if [[ "$RESULT" == "403" ]]; then
          echo "Test passed: Internal access without token correctly rejected with $RESULT"
        else
          echo "Test failed: Internal access without token returned $RESULT instead of 403"
          exit 1
        fi

    # Test 7: Internal access from different namespace
    - name: Test internal access from different namespace
      run: |
        # Create a pod in the attacker namespace
        kubectl run -n kubeflow-user-example-com-attacker curl-test --image=curlimages/curl --restart=Never -- sleep 3600

        # Wait for the pod to be ready
        kubectl wait --for=condition=ready pod/curl-test -n kubeflow-user-example-com-attacker --timeout=60s

        # Run test from attacker namespace pod
        RESULT=$(kubectl exec -n kubeflow-user-example-com-attacker curl-test -- \
          curl -s -o /dev/null -w "%{http_code}" \
          -H "Authorization: Bearer $(cat /var/run/secrets/kubernetes.io/serviceaccount/token)" \
          -H "Content-Type: application/json" \
          "http://isvc-sklearn-predictor.kubeflow-user-example-com.svc.cluster.local/v1/models/isvc-sklearn:predict" \
          -d '{"instances": [[6.8, 2.8, 4.8, 1.4]]}')

        if [[ "$RESULT" == "403" ]]; then
          echo "Test passed: Internal access from different namespace correctly rejected with $RESULT"
        else
          echo "Test failed: Internal access from different namespace returned $RESULT instead of 403"
          exit 1
        fi

    - name: Run kserve tests with m2m token from SA kubeflow-user-example-com/default-editor
      run: |
        export KSERVE_INGRESS_HOST_PORT=localhost:8080
        export KSERVE_M2M_TOKEN="$(kubectl -n kubeflow-user-example-com create token default-editor)"
        cd ./apps/kserve/tests && pytest . -vs --log-level info

    - name: Test path-based external access
      run: |
        export KSERVE_INGRESS_HOST_PORT=localhost:8080
        export KSERVE_M2M_TOKEN="$(kubectl -n kubeflow-user-example-com create token default-editor)"

        # Test external path-based access
        curl -v -H "Host: isvc-sklearn-predictor.kubeflow-user-example-com.example.com" \
            -H "Authorization: Bearer ${KSERVE_M2M_TOKEN}" \
            -H "Content-Type: application/json" \
            "http://${KSERVE_INGRESS_HOST_PORT}/kserve/kubeflow-user-example-com/isvc-sklearn/v1/models/isvc-sklearn:predict" \
            -d '{"instances": [[6.8, 2.8, 4.8, 1.4], [6.0, 3.4, 4.5, 1.6]]}'

    - name: Run kserve models webapp test
      run: |
        kubectl wait --for=condition=Available --timeout=300s -n kubeflow deployment/kserve-models-web-app

    - name: Apply Pod Security Standards baseline levels
      run: ./tests/gh-actions/enable_baseline_PSS.sh

    - name: Unapply applied baseline labels
      run: |
        NAMESPACES=("istio-system" "auth" "cert-manager" "oauth2-proxy" "kubeflow" "knative-serving")
        for NAMESPACE in "${NAMESPACES[@]}"; do
          if kubectl get namespace "$NAMESPACE" >/dev/null 2>&1; then
            kubectl label namespace $NAMESPACE pod-security.kubernetes.io/enforce-
          fi
        done

    - name: Applying Pod Security Standards restricted levels
      run: ./tests/gh-actions/enable_restricted_PSS.sh
