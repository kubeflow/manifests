name: Test KServe
on:
  pull_request:
    paths:
    - tests/gh-actions/install_KinD_create_KinD_cluster_install_kustomize.sh
    - .github/workflows/kserve_m2m_test.yaml
    - apps/kserve/**
    - tests/gh-actions/install_kserve.sh
    - common/istio*/**
    - tests/gh-actions/install_istio*.sh
    - common/oauth2-proxy/**
    - tests/gh-actions/install_oauth2-proxy.sh
    - common/cert-manager/**
    - tests/gh-actions/install_cert_manager.sh
    - common/knative/**
    - tests/gh-actions/install_knative*.sh

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Install KinD, Create KinD cluster and Install kustomize
      run: ./tests/gh-actions/install_KinD_create_KinD_cluster_install_kustomize.sh

    - name: Install kubectl
      run: ./tests/gh-actions/install_kubectl.sh

    - name: Install Istio CNI
      run: ./tests/gh-actions/install_istio-cni.sh

    - name: Install oauth2-proxy
      run: ./tests/gh-actions/install_oauth2-proxy.sh

    - name: Install cert-manager
      run: ./tests/gh-actions/install_cert_manager.sh

    - name: Create kubeflow namespace
      run: kustomize build common/kubeflow-namespace/base | kubectl apply -f -

    - name: Install knative CNI
      run: ./tests/gh-actions/install_knative-cni.sh

    - name: Install KServe
      run: ./tests/gh-actions/install_kserve.sh

    - name: Install KF Multi Tenancy
      run: ./tests/gh-actions/install_multi_tenancy.sh

    - name: Install kubeflow-istio-resources
      run: kustomize build common/istio-1-24/kubeflow-istio-resources/base | kubectl apply -f -

    - name: Create KF Profile
      run: ./tests/gh-actions/install_kubeflow_profile.sh

    - name: Deploy InferenceService
      run: |
        cat <<EOF | kubectl apply -f -
        apiVersion: "serving.kserve.io/v1beta1"
        kind: "InferenceService"
        metadata:
          name: "isvc-sklearn"
          namespace: kubeflow-user-example-com
        spec:
          predictor:
            sklearn:
              storageUri: "gs://kfserving-examples/models/sklearn/1.0/model"
        EOF
        kubectl wait --for=condition=Ready inferenceservice isvc-sklearn -n kubeflow-user-example-com --timeout=300s
        kubectl get ksvc -n kubeflow-user-example-com -l serving.kserve.io/inferenceservice=isvc-sklearn

    - name: Diagnose KServe Service Labels
      run: kubectl get pods -n kubeflow-user-example-com -l serving.knative.dev/service=isvc-sklearn-predictor --show-labels

    - name: Apply open AuthorizationPolicy for the KServe service
      run: |
        cat <<EOF | kubectl apply -f -
        apiVersion: security.istio.io/v1beta1
        kind: AuthorizationPolicy
        metadata:
          name: isvc-sklearn-predictor-allow
          namespace: kubeflow-user-example-com
        spec:
          selector:
            matchLabels:
              serving.knative.dev/service: isvc-sklearn-predictor
          action: ALLOW
          rules:
          - {}
        EOF

    - name: Setup python 3.12
      uses: actions/setup-python@v4
      with:
        python-version: 3.12

    - name: Install test dependencies
      run: pip install -r ./apps/kserve/tests/requirements.txt

    - name: Port forward
      run: ./tests/gh-actions/port_forward_gateway.sh

    - name: Verify CNI is being used instead of init containers
      run: |
        INIT_CONTAINERS=$(kubectl get pods -A -o jsonpath='{range .items[*]}{.metadata.name}{"\n"}{range .spec.initContainers[*]}{.name}{"\n"}{end}{"\n"}{end}' | grep istio-init || echo "none")
        [[ "$INIT_CONTAINERS" == "none" ]] || exit 1

    - name: Apply cluster-local-gateway overlays with oauth2-proxy
      run: |
        kustomize build common/istio-cni-1-24/cluster-local-gateway/overlays/oauth2-proxy/ | kubectl apply -f -
        echo "Waiting for configurations to apply..."
        sleep 20

    - name: Test external access with valid token
      run: |
        export KSERVE_INGRESS_HOST_PORT=localhost:8080
        export KSERVE_M2M_TOKEN="$(kubectl -n kubeflow-user-example-com create token default-editor)"
        curl --fail --show-error -H "Host: isvc-sklearn.kubeflow-user-example-com.example.com" \
          -H "Authorization: Bearer ${KSERVE_M2M_TOKEN}" \
          -H "Content-Type: application/json" \
          "http://${KSERVE_INGRESS_HOST_PORT}/v1/models/isvc-sklearn:predict" \
          -d '{"instances": [[6.8, 2.8, 4.8, 1.4]]}'

    - name: Test external access without token
      run: |
        export KSERVE_INGRESS_HOST_PORT=localhost:8080
        RESPONSE=$(curl -s -o /dev/null -w "%{http_code}" \
          -H "Host: isvc-sklearn.kubeflow-user-example-com.example.com" \
          -H "Content-Type: application/json" \
          "http://${KSERVE_INGRESS_HOST_PORT}/v1/models/isvc-sklearn:predict" \
          -d '{"instances": [[6.8, 2.8, 4.8, 1.4]]}')
        [[ "$RESPONSE" == "403" ]] || exit 1

    - name: Test external access with token from unauthorized namespace
      run: |
        export KSERVE_INGRESS_HOST_PORT=localhost:8080
        kubectl create ns kubeflow-user-example-com-attacker
        kubectl create serviceaccount attacker-sa -n kubeflow-user-example-com-attacker
        export ATTACKER_TOKEN="$(kubectl -n kubeflow-user-example-com-attacker create token attacker-sa)"
        RESPONSE=$(curl -s -o /dev/null -w "%{http_code}" \
          -H "Host: isvc-sklearn.kubeflow-user-example-com.example.com" \
          -H "Authorization: Bearer ${ATTACKER_TOKEN}" \
          -H "Content-Type: application/json" \
          "http://${KSERVE_INGRESS_HOST_PORT}/v1/models/isvc-sklearn:predict" \
          -d '{"instances": [[6.8, 2.8, 4.8, 1.4]]}')
        [[ "$RESPONSE" == "403" ]] || exit 1

    - name: Add unauthorized namespace to policy and test again
      run: |
        export KSERVE_INGRESS_HOST_PORT=localhost:8080
        cat <<EOF | kubectl apply -f -
        apiVersion: security.istio.io/v1
        kind: AuthorizationPolicy
        metadata:
          name: cluster-local-gateway
          namespace: istio-system
        spec:
          selector:
            matchLabels:
              app: cluster-local-gateway
              istio: cluster-local-gateway
          action: ALLOW
          rules:
          - to:
              - operation:
                  hosts:
                  - "*.kubeflow-user-example-com.svc.cluster.local"
            when:
              - key: request.headers[kubeflow-userid]
                values:
                - "system:serviceaccount:kubeflow-user-example-com:*"
                - "system:serviceaccount:kubeflow-user-example-com-attacker:*"
          - to:
              - operation:
                  hosts:
                  - "*.kubeflow-user-example-com.svc.cluster.local"
            when:
              - key: request.auth.claims[sub]
                values:
                - "system:serviceaccount:kubeflow-user-example-com:*"
                - "system:serviceaccount:kubeflow-user-example-com-attacker:*"
          - to:
              - operation:
                  paths:
                  - "/healthz"
                  - "/metrics"
                  - "/wait-for-drain"
        EOF
        sleep 30
        export ATTACKER_TOKEN="$(kubectl -n kubeflow-user-example-com-attacker create token attacker-sa)"
        curl --fail --show-error -H "Host: isvc-sklearn.kubeflow-user-example-com.example.com" \
          -H "Authorization: Bearer ${ATTACKER_TOKEN}" \
          -H "Content-Type: application/json" \
          "http://${KSERVE_INGRESS_HOST_PORT}/v1/models/isvc-sklearn:predict" \
          -d '{"instances": [[6.8, 2.8, 4.8, 1.4]]}'

    - name: Apply cluster-local-gateway overlays with oauth2-proxy Again
      run: |
        kustomize build common/istio-cni-1-24/cluster-local-gateway/overlays/oauth2-proxy/ | kubectl apply -f -
        sleep 30

    - name: Test internal access with token from same namespace
      run: |
        kubectl run -n kubeflow-user-example-com curl-test --image=curlimages/curl --restart=Never -- sleep 3600
        kubectl wait --for=condition=ready pod/curl-test -n kubeflow-user-example-com --timeout=60s
        TOKEN=$(kubectl -n kubeflow-user-example-com create token default-editor)
        kubectl exec -n kubeflow-user-example-com curl-test -- curl --fail --show-error \
        -H "Authorization: Bearer ${TOKEN}" \
        -H "Content-Type: application/json" \
        "http://isvc-sklearn-predictor.kubeflow-user-example-com.svc.cluster.local/v1/models/isvc-sklearn:predict" \
        -d '{"instances": [[6.8, 2.8, 4.8, 1.4]]}'

    - name: Test internal access from different namespace
      run: |
        kubectl delete pod -n kubeflow-user-example-com-attacker curl-test --ignore-not-found=true
        kubectl run -n kubeflow-user-example-com-attacker curl-test --image=curlimages/curl --restart=Never -- sleep 3600
        kubectl wait --for=condition=ready pod/curl-test -n kubeflow-user-example-com-attacker --timeout=60s
        ATTACKER_TOKEN=$(kubectl -n kubeflow-user-example-com-attacker create token attacker-sa)
        RESULT=$(kubectl exec -n kubeflow-user-example-com-attacker curl-test -- \
          curl -s -o /dev/null -w "%{http_code}" \
          -H "Authorization: Bearer ${ATTACKER_TOKEN}" \
          -H "Content-Type: application/json" \
          "http://isvc-sklearn-predictor.kubeflow-user-example-com.svc.cluster.local/v1/models/isvc-sklearn:predict" \
          -d '{"instances": [[6.8, 2.8, 4.8, 1.4]]}')
        [[ "$RESULT" == "403" ]] || exit 1

    - name: Run kserve tests with m2m token
      run: |
        export KSERVE_INGRESS_HOST_PORT=localhost:8080
        export KSERVE_M2M_TOKEN="$(kubectl -n kubeflow-user-example-com create token default-editor)"
        cd ./apps/kserve/tests && pytest . -vs --log-level info

    - name: Run kserve models webapp test
      run: kubectl wait --for=condition=Available --timeout=300s -n kubeflow deployment/kserve-models-web-app

    - name: Apply Pod Security Standards baseline levels
      run: ./tests/gh-actions/enable_baseline_PSS.sh

    - name: Unapply applied baseline labels
      run: |
        NAMESPACES=("istio-system" "auth" "cert-manager" "oauth2-proxy" "kubeflow" "knative-serving")
        for NAMESPACE in "${NAMESPACES[@]}"; do
          if kubectl get namespace "$NAMESPACE" >/dev/null 2>&1; then
            kubectl label namespace $NAMESPACE pod-security.kubernetes.io/enforce-
          fi
        done

    - name: Applying Pod Security Standards restricted levels
      run: ./tests/gh-actions/enable_restricted_PSS.sh
