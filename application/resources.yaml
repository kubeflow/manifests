---
apiVersion: apiextensions.k8s.io/v1beta1
kind: CustomResourceDefinition
metadata:
  labels:
    api: default
  name: applications.app.k8s.io
spec:
  group: app.k8s.io
  names:
    kind: Application
    plural: applications
    singular: application
  scope: Namespaced
  validation:
    openAPIV3Schema:
      properties:
        apiVersion:
          type: string
        kind:
          type: string
        metadata:
          type: object
        spec:
          properties:
            assemblyPhase:
              type: string
            componentKinds:
              items:
                type: object
              type: array
            descriptor:
              properties:
                description:
                  type: string
                icons:
                  items:
                    properties:
                      size:
                        type: string
                      src:
                        type: string
                      type:
                        type: string
                    required:
                    - src
                    type: object
                  type: array
                keywords:
                  items:
                    type: string
                  type: array
                links:
                  items:
                    properties:
                      description:
                        type: string
                      url:
                        type: string
                    type: object
                  type: array
                maintainers:
                  items:
                    properties:
                      email:
                        type: string
                      name:
                        type: string
                      url:
                        type: string
                    type: object
                  type: array
                notes:
                  type: string
                owners:
                  items:
                    properties:
                      email:
                        type: string
                      name:
                        type: string
                      url:
                        type: string
                    type: object
                  type: array
                type:
                  type: string
                version:
                  type: string
              type: object
            info:
              items:
                properties:
                  name:
                    type: string
                  type:
                    type: string
                  value:
                    type: string
                  valueFrom:
                    properties:
                      configMapKeyRef:
                        properties:
                          apiVersion:
                            type: string
                          fieldPath:
                            type: string
                          key:
                            type: string
                          kind:
                            type: string
                          name:
                            type: string
                          namespace:
                            type: string
                          resourceVersion:
                            type: string
                          uid:
                            type: string
                        type: object
                      ingressRef:
                        properties:
                          apiVersion:
                            type: string
                          fieldPath:
                            type: string
                          host:
                            type: string
                          kind:
                            type: string
                          name:
                            type: string
                          namespace:
                            type: string
                          path:
                            type: string
                          resourceVersion:
                            type: string
                          uid:
                            type: string
                        type: object
                      secretKeyRef:
                        properties:
                          apiVersion:
                            type: string
                          fieldPath:
                            type: string
                          key:
                            type: string
                          kind:
                            type: string
                          name:
                            type: string
                          namespace:
                            type: string
                          resourceVersion:
                            type: string
                          uid:
                            type: string
                        type: object
                      serviceRef:
                        properties:
                          apiVersion:
                            type: string
                          fieldPath:
                            type: string
                          kind:
                            type: string
                          name:
                            type: string
                          namespace:
                            type: string
                          path:
                            type: string
                          port:
                            format: int32
                            type: integer
                          resourceVersion:
                            type: string
                          uid:
                            type: string
                        type: object
                      type:
                        type: string
                    type: object
                type: object
              type: array
            selector:
              type: object
          type: object
        status:
          properties:
            observedGeneration:
              format: int64
              type: integer
          type: object
  version: v1beta1
---
apiVersion: metacontroller.k8s.io/v1alpha1
kind: CompositeController
metadata:
  name: application-controller
spec:
  childResources:
  - apiVersion: v1
    resource: configmaps
    updateStrategy:
      method: InPlace
  - apiVersion: apps/v1
    resource: deployments
    updateStrategy:
      method: InPlace
  - apiVersion: v1
    resource: persistentvolumeclaims
    updateStrategy:
      method: InPlace
  - apiVersion: rbac.authorization.k8s.io/v1
    resource: rolebindings
    updateStrategy:
      method: InPlace
  - apiVersion: rbac.authorization.k8s.io/v1
    resource: roles
    updateStrategy:
      method: InPlace
  - apiVersion: v1
    resource: secrets
    updateStrategy:
      method: InPlace
  - apiVersion: v1
    resource: serviceaccounts
    updateStrategy:
      method: InPlace
  - apiVersion: v1
    resource: services
    updateStrategy:
      method: InPlace
  hooks:
    sync:
      webhook:
        url: http://application-controller.kubeflow/sync-application
  parentResource:
    apiVersion: app.k8s.io/v1beta1
    resource: applications
  resyncPeriodSeconds: 10
---
apiVersion: v1
data:
  sync-application.jsonnet: |
    //
    // This function will track expected children with created children (request.children)
    // and report status information
    //
    function(request) {
      local util = import "util.libsonnet",
      local extendedInfo = util.toBool(false),
      local children = [
      {
        "apiVersion": "v1",
        "kind": "Service",
        "metadata": {
          "labels": {
            "app.kubernetes.io/name": "application",
            "service": "ambassador"
          },
          "name": "ambassador",
          "namespace": "kubeflow"
        }
      },
      {
        "apiVersion": "v1",
        "kind": "Service",
        "metadata": {
          "labels": {
            "app.kubernetes.io/name": "application",
            "service": "ambassador-admin"
          },
          "name": "ambassador-admin",
          "namespace": "kubeflow"
        }
      },
      {
        "apiVersion": "v1",
        "kind": "ServiceAccount",
        "metadata": {
          "labels": {
            "app.kubernetes.io/name": "application"
          },
          "name": "ambassador",
          "namespace": "kubeflow"
        }
      },
      {
        "apiVersion": "apps/v1beta1",
        "kind": "Deployment",
        "metadata": {
          "labels": {
            "app.kubernetes.io/name": "application"
          },
          "name": "ambassador",
          "namespace": "kubeflow"
        }
      },
      {
        "apiVersion": "extensions/v1beta1",
        "kind": "Deployment",
        "metadata": {
          "labels": {
            "app": "centraldashboard",
            "app.kubernetes.io/name": "application"
          },
          "name": "centraldashboard",
          "namespace": "kubeflow"
        }
      },
      {
        "apiVersion": "v1",
        "kind": "Service",
        "metadata": {
          "labels": {
            "app": "centraldashboard",
            "app.kubernetes.io/name": "application"
          },
          "name": "centraldashboard",
          "namespace": "kubeflow"
        }
      },
      {
        "apiVersion": "v1",
        "kind": "ServiceAccount",
        "metadata": {
          "labels": {
            "app.kubernetes.io/name": "application"
          },
          "name": "centraldashboard",
          "namespace": "kubeflow"
        }
      },
      {
        "apiVersion": "rbac.authorization.k8s.io/v1beta1",
        "kind": "Role",
        "metadata": {
          "labels": {
            "app": "centraldashboard",
            "app.kubernetes.io/name": "application"
          },
          "name": "centraldashboard",
          "namespace": "kubeflow"
        }
      },
      {
        "apiVersion": "rbac.authorization.k8s.io/v1beta1",
        "kind": "RoleBinding",
        "metadata": {
          "labels": {
            "app": "centraldashboard",
            "app.kubernetes.io/name": "application"
          },
          "name": "centraldashboard",
          "namespace": "kubeflow"
        }
      },
      {
        "apiVersion": "extensions/v1beta1",
        "kind": "Deployment",
        "metadata": {
          "labels": {
            "app.kubernetes.io/name": "application"
          },
          "name": "tf-job-operator",
          "namespace": "kubeflow"
        }
      },
      {
        "apiVersion": "v1",
        "kind": "ConfigMap",
        "metadata": {
          "labels": {
            "app.kubernetes.io/name": "application"
          },
          "name": "tf-job-operator-config",
          "namespace": "kubeflow"
        }
      },
      {
        "apiVersion": "v1",
        "kind": "ServiceAccount",
        "metadata": {
          "labels": {
            "app": "tf-job-operator",
            "app.kubernetes.io/name": "application"
          },
          "name": "tf-job-operator",
          "namespace": "kubeflow"
        }
      },
      {
        "apiVersion": "v1",
        "kind": "Service",
        "metadata": {
          "labels": {
            "app.kubernetes.io/name": "application"
          },
          "name": "tf-job-dashboard",
          "namespace": "kubeflow"
        }
      },
      {
        "apiVersion": "v1",
        "kind": "ServiceAccount",
        "metadata": {
          "labels": {
            "app": "tf-job-dashboard",
            "app.kubernetes.io/name": "application"
          },
          "name": "tf-job-dashboard",
          "namespace": "kubeflow"
        }
      },
      {
        "apiVersion": "extensions/v1beta1",
        "kind": "Deployment",
        "metadata": {
          "labels": {
            "app.kubernetes.io/name": "application"
          },
          "name": "tf-job-dashboard",
          "namespace": "kubeflow"
        }
      },
      {
        "apiVersion": "v1",
        "kind": "ConfigMap",
        "metadata": {
          "labels": {
            "app.kubernetes.io/name": "application"
          },
          "name": "pytorch-operator-config",
          "namespace": "kubeflow"
        }
      },
      {
        "apiVersion": "v1",
        "kind": "ServiceAccount",
        "metadata": {
          "labels": {
            "app": "pytorch-operator",
            "app.kubernetes.io/name": "application"
          },
          "name": "pytorch-operator",
          "namespace": "kubeflow"
        }
      },
      {
        "apiVersion": "extensions/v1beta1",
        "kind": "Deployment",
        "metadata": {
          "labels": {
            "app.kubernetes.io/name": "application"
          },
          "name": "pytorch-operator",
          "namespace": "kubeflow"
        }
      },
      {
        "apiVersion": "extensions/v1beta1",
        "kind": "Deployment",
        "metadata": {
          "labels": {
            "app": "workflow-controller",
            "app.kubernetes.io/name": "application"
          },
          "name": "workflow-controller",
          "namespace": "kubeflow"
        }
      },
      {
        "apiVersion": "extensions/v1beta1",
        "kind": "Deployment",
        "metadata": {
          "labels": {
            "app": "argo-ui",
            "app.kubernetes.io/name": "application"
          },
          "name": "argo-ui",
          "namespace": "kubeflow"
        }
      },
      {
        "apiVersion": "v1",
        "kind": "Service",
        "metadata": {
          "labels": {
            "app": "argo-ui",
            "app.kubernetes.io/name": "application"
          },
          "name": "argo-ui",
          "namespace": "kubeflow"
        }
      },
      {
        "apiVersion": "v1",
        "kind": "ConfigMap",
        "metadata": {
          "labels": {
            "app.kubernetes.io/name": "application"
          },
          "name": "workflow-controller-configmap",
          "namespace": "kubeflow"
        }
      },
      {
        "apiVersion": "v1",
        "kind": "ServiceAccount",
        "metadata": {
          "labels": {
            "app.kubernetes.io/name": "application"
          },
          "name": "argo",
          "namespace": "kubeflow"
        }
      },
      {
        "apiVersion": "v1",
        "kind": "ServiceAccount",
        "metadata": {
          "labels": {
            "app.kubernetes.io/name": "application"
          },
          "name": "argo-ui",
          "namespace": "kubeflow"
        }
      },
      {
        "apiVersion": "v1",
        "kind": "Service",
        "metadata": {
          "labels": {
            "app.kubernetes.io/name": "application"
          },
          "name": "minio-service",
          "namespace": "kubeflow"
        }
      },
      {
        "apiVersion": "apps/v1beta1",
        "kind": "Deployment",
        "metadata": {
          "labels": {
            "app.kubernetes.io/name": "application"
          },
          "name": "minio",
          "namespace": "kubeflow"
        }
      },
      {
        "apiVersion": "v1",
        "kind": "Secret",
        "metadata": {
          "labels": {
            "app.kubernetes.io/name": "application"
          },
          "name": "mlpipeline-minio-artifact",
          "namespace": "kubeflow"
        }
      },
      {
        "apiVersion": "v1",
        "kind": "Service",
        "metadata": {
          "labels": {
            "app.kubernetes.io/name": "application"
          },
          "name": "mysql",
          "namespace": "kubeflow"
        }
      },
      {
        "apiVersion": "apps/v1beta2",
        "kind": "Deployment",
        "metadata": {
          "labels": {
            "app.kubernetes.io/name": "application"
          },
          "name": "mysql",
          "namespace": "kubeflow"
        }
      },
      {
        "apiVersion": "v1",
        "kind": "ServiceAccount",
        "metadata": {
          "labels": {
            "app.kubernetes.io/name": "application"
          },
          "name": "ml-pipeline",
          "namespace": "kubeflow"
        }
      },
      {
        "apiVersion": "rbac.authorization.k8s.io/v1beta1",
        "kind": "RoleBinding",
        "metadata": {
          "labels": {
            "app": "ml-pipeline",
            "app.kubernetes.io/name": "application"
          },
          "name": "ml-pipeline",
          "namespace": "kubeflow"
        }
      },
      {
        "apiVersion": "rbac.authorization.k8s.io/v1beta1",
        "kind": "Role",
        "metadata": {
          "labels": {
            "app": "ml-pipeline",
            "app.kubernetes.io/name": "application"
          },
          "name": "ml-pipeline",
          "namespace": "kubeflow"
        }
      },
      {
        "apiVersion": "v1",
        "kind": "Service",
        "metadata": {
          "labels": {
            "app": "ml-pipeline",
            "app.kubernetes.io/name": "application"
          },
          "name": "ml-pipeline",
          "namespace": "kubeflow"
        }
      },
      {
        "apiVersion": "apps/v1beta2",
        "kind": "Deployment",
        "metadata": {
          "labels": {
            "app": "ml-pipeline",
            "app.kubernetes.io/name": "application"
          },
          "name": "ml-pipeline",
          "namespace": "kubeflow"
        }
      },
      {
        "apiVersion": "v1",
        "kind": "ServiceAccount",
        "metadata": {
          "labels": {
            "app.kubernetes.io/name": "application"
          },
          "name": "pipeline-runner",
          "namespace": "kubeflow"
        }
      },
      {
        "apiVersion": "v1",
        "kind": "ServiceAccount",
        "metadata": {
          "labels": {
            "app.kubernetes.io/name": "application"
          },
          "name": "ml-pipeline-scheduledworkflow",
          "namespace": "kubeflow"
        }
      },
      {
        "apiVersion": "rbac.authorization.k8s.io/v1beta1",
        "kind": "Role",
        "metadata": {
          "labels": {
            "app": "ml-pipeline-scheduledworkflow",
            "app.kubernetes.io/name": "application"
          },
          "name": "ml-pipeline-scheduledworkflow",
          "namespace": "kubeflow"
        }
      },
      {
        "apiVersion": "apps/v1beta2",
        "kind": "Deployment",
        "metadata": {
          "labels": {
            "app": "ml-pipeline-scheduledworkflow",
            "app.kubernetes.io/name": "application"
          },
          "name": "ml-pipeline-scheduledworkflow",
          "namespace": "kubeflow"
        }
      },
      {
        "apiVersion": "v1",
        "kind": "ServiceAccount",
        "metadata": {
          "labels": {
            "app.kubernetes.io/name": "application"
          },
          "name": "ml-pipeline-persistenceagent",
          "namespace": "kubeflow"
        }
      },
      {
        "apiVersion": "apps/v1beta2",
        "kind": "Deployment",
        "metadata": {
          "labels": {
            "app": "ml-pipeline-persistenceagent",
            "app.kubernetes.io/name": "application"
          },
          "name": "ml-pipeline-persistenceagent",
          "namespace": "kubeflow"
        }
      },
      {
        "apiVersion": "v1",
        "kind": "ServiceAccount",
        "metadata": {
          "labels": {
            "app.kubernetes.io/name": "application"
          },
          "name": "ml-pipeline-viewer-crd-service-account",
          "namespace": "kubeflow"
        }
      },
      {
        "apiVersion": "apps/v1beta2",
        "kind": "Deployment",
        "metadata": {
          "labels": {
            "app": "ml-pipeline-viewer-crd",
            "app.kubernetes.io/name": "application"
          },
          "name": "ml-pipeline-viewer-controller-deployment",
          "namespace": "kubeflow"
        }
      },
      {
        "apiVersion": "v1",
        "kind": "ServiceAccount",
        "metadata": {
          "labels": {
            "app.kubernetes.io/name": "application"
          },
          "name": "ml-pipeline-ui",
          "namespace": "kubeflow"
        }
      },
      {
        "apiVersion": "v1",
        "kind": "Service",
        "metadata": {
          "labels": {
            "app": "ml-pipeline-ui",
            "app.kubernetes.io/name": "application"
          },
          "name": "ml-pipeline-ui",
          "namespace": "kubeflow"
        }
      },
      {
        "apiVersion": "v1",
        "kind": "Service",
        "metadata": {
          "labels": {
            "app": "ml-pipeline-tensorboard-ui",
            "app.kubernetes.io/name": "application"
          },
          "name": "ml-pipeline-tensorboard-ui",
          "namespace": "kubeflow"
        }
      },
      {
        "apiVersion": "rbac.authorization.k8s.io/v1beta1",
        "kind": "RoleBinding",
        "metadata": {
          "labels": {
            "app": "ml-pipeline-ui",
            "app.kubernetes.io/name": "application"
          },
          "name": "ml-pipeline-ui",
          "namespace": "kubeflow"
        }
      },
      {
        "apiVersion": "rbac.authorization.k8s.io/v1beta1",
        "kind": "Role",
        "metadata": {
          "labels": {
            "app": "ml-pipeline-ui",
            "app.kubernetes.io/name": "application"
          },
          "name": "ml-pipeline-ui",
          "namespace": "kubeflow"
        }
      },
      {
        "apiVersion": "apps/v1beta2",
        "kind": "Deployment",
        "metadata": {
          "labels": {
            "app": "ml-pipeline-ui",
            "app.kubernetes.io/name": "application"
          },
          "name": "ml-pipeline-ui",
          "namespace": "kubeflow"
        }
      },
      {
        "apiVersion": "v1",
        "kind": "PersistentVolumeClaim",
        "metadata": {
          "labels": {
            "app.kubernetes.io/name": "application"
          },
          "name": "mysql-pv-claim",
          "namespace": "kubeflow"
        }
      },
      {
        "apiVersion": "v1",
        "kind": "PersistentVolumeClaim",
        "metadata": {
          "labels": {
            "app.kubernetes.io/name": "application"
          },
          "name": "minio-pvc",
          "namespace": "kubeflow"
        }
      }
    ],
      local groupedResources = {
      "ConfigMap": {
        "pytorch-operator-config": {
          "apiVersion": "v1",
          "kind": "ConfigMap",
          "metadata": {
            "labels": {
              "app.kubernetes.io/name": "application"
            },
            "name": "pytorch-operator-config",
            "namespace": "kubeflow"
          }
        },
        "tf-job-operator-config": {
          "apiVersion": "v1",
          "kind": "ConfigMap",
          "metadata": {
            "labels": {
              "app.kubernetes.io/name": "application"
            },
            "name": "tf-job-operator-config",
            "namespace": "kubeflow"
          }
        },
        "workflow-controller-configmap": {
          "apiVersion": "v1",
          "kind": "ConfigMap",
          "metadata": {
            "labels": {
              "app.kubernetes.io/name": "application"
            },
            "name": "workflow-controller-configmap",
            "namespace": "kubeflow"
          }
        }
      },
      "Deployment": {
        "ambassador": {
          "apiVersion": "apps/v1beta1",
          "kind": "Deployment",
          "metadata": {
            "labels": {
              "app.kubernetes.io/name": "application"
            },
            "name": "ambassador",
            "namespace": "kubeflow"
          }
        },
        "argo-ui": {
          "apiVersion": "extensions/v1beta1",
          "kind": "Deployment",
          "metadata": {
            "labels": {
              "app": "argo-ui",
              "app.kubernetes.io/name": "application"
            },
            "name": "argo-ui",
            "namespace": "kubeflow"
          }
        },
        "centraldashboard": {
          "apiVersion": "extensions/v1beta1",
          "kind": "Deployment",
          "metadata": {
            "labels": {
              "app": "centraldashboard",
              "app.kubernetes.io/name": "application"
            },
            "name": "centraldashboard",
            "namespace": "kubeflow"
          }
        },
        "minio": {
          "apiVersion": "apps/v1beta1",
          "kind": "Deployment",
          "metadata": {
            "labels": {
              "app.kubernetes.io/name": "application"
            },
            "name": "minio",
            "namespace": "kubeflow"
          }
        },
        "ml-pipeline": {
          "apiVersion": "apps/v1beta2",
          "kind": "Deployment",
          "metadata": {
            "labels": {
              "app": "ml-pipeline",
              "app.kubernetes.io/name": "application"
            },
            "name": "ml-pipeline",
            "namespace": "kubeflow"
          }
        },
        "ml-pipeline-persistenceagent": {
          "apiVersion": "apps/v1beta2",
          "kind": "Deployment",
          "metadata": {
            "labels": {
              "app": "ml-pipeline-persistenceagent",
              "app.kubernetes.io/name": "application"
            },
            "name": "ml-pipeline-persistenceagent",
            "namespace": "kubeflow"
          }
        },
        "ml-pipeline-scheduledworkflow": {
          "apiVersion": "apps/v1beta2",
          "kind": "Deployment",
          "metadata": {
            "labels": {
              "app": "ml-pipeline-scheduledworkflow",
              "app.kubernetes.io/name": "application"
            },
            "name": "ml-pipeline-scheduledworkflow",
            "namespace": "kubeflow"
          }
        },
        "ml-pipeline-ui": {
          "apiVersion": "apps/v1beta2",
          "kind": "Deployment",
          "metadata": {
            "labels": {
              "app": "ml-pipeline-ui",
              "app.kubernetes.io/name": "application"
            },
            "name": "ml-pipeline-ui",
            "namespace": "kubeflow"
          }
        },
        "ml-pipeline-viewer-controller-deployment": {
          "apiVersion": "apps/v1beta2",
          "kind": "Deployment",
          "metadata": {
            "labels": {
              "app": "ml-pipeline-viewer-crd",
              "app.kubernetes.io/name": "application"
            },
            "name": "ml-pipeline-viewer-controller-deployment",
            "namespace": "kubeflow"
          }
        },
        "mysql": {
          "apiVersion": "apps/v1beta2",
          "kind": "Deployment",
          "metadata": {
            "labels": {
              "app.kubernetes.io/name": "application"
            },
            "name": "mysql",
            "namespace": "kubeflow"
          }
        },
        "pytorch-operator": {
          "apiVersion": "extensions/v1beta1",
          "kind": "Deployment",
          "metadata": {
            "labels": {
              "app.kubernetes.io/name": "application"
            },
            "name": "pytorch-operator",
            "namespace": "kubeflow"
          }
        },
        "tf-job-dashboard": {
          "apiVersion": "extensions/v1beta1",
          "kind": "Deployment",
          "metadata": {
            "labels": {
              "app.kubernetes.io/name": "application"
            },
            "name": "tf-job-dashboard",
            "namespace": "kubeflow"
          }
        },
        "tf-job-operator": {
          "apiVersion": "extensions/v1beta1",
          "kind": "Deployment",
          "metadata": {
            "labels": {
              "app.kubernetes.io/name": "application"
            },
            "name": "tf-job-operator",
            "namespace": "kubeflow"
          }
        },
        "workflow-controller": {
          "apiVersion": "extensions/v1beta1",
          "kind": "Deployment",
          "metadata": {
            "labels": {
              "app": "workflow-controller",
              "app.kubernetes.io/name": "application"
            },
            "name": "workflow-controller",
            "namespace": "kubeflow"
          }
        }
      },
      "PersistentVolumeClaim": {
        "minio-pvc": {
          "apiVersion": "v1",
          "kind": "PersistentVolumeClaim",
          "metadata": {
            "labels": {
              "app.kubernetes.io/name": "application"
            },
            "name": "minio-pvc",
            "namespace": "kubeflow"
          }
        },
        "mysql-pv-claim": {
          "apiVersion": "v1",
          "kind": "PersistentVolumeClaim",
          "metadata": {
            "labels": {
              "app.kubernetes.io/name": "application"
            },
            "name": "mysql-pv-claim",
            "namespace": "kubeflow"
          }
        }
      },
      "Role": {
        "centraldashboard": {
          "apiVersion": "rbac.authorization.k8s.io/v1beta1",
          "kind": "Role",
          "metadata": {
            "labels": {
              "app": "centraldashboard",
              "app.kubernetes.io/name": "application"
            },
            "name": "centraldashboard",
            "namespace": "kubeflow"
          }
        },
        "ml-pipeline": {
          "apiVersion": "rbac.authorization.k8s.io/v1beta1",
          "kind": "Role",
          "metadata": {
            "labels": {
              "app": "ml-pipeline",
              "app.kubernetes.io/name": "application"
            },
            "name": "ml-pipeline",
            "namespace": "kubeflow"
          }
        },
        "ml-pipeline-scheduledworkflow": {
          "apiVersion": "rbac.authorization.k8s.io/v1beta1",
          "kind": "Role",
          "metadata": {
            "labels": {
              "app": "ml-pipeline-scheduledworkflow",
              "app.kubernetes.io/name": "application"
            },
            "name": "ml-pipeline-scheduledworkflow",
            "namespace": "kubeflow"
          }
        },
        "ml-pipeline-ui": {
          "apiVersion": "rbac.authorization.k8s.io/v1beta1",
          "kind": "Role",
          "metadata": {
            "labels": {
              "app": "ml-pipeline-ui",
              "app.kubernetes.io/name": "application"
            },
            "name": "ml-pipeline-ui",
            "namespace": "kubeflow"
          }
        }
      },
      "RoleBinding": {
        "centraldashboard": {
          "apiVersion": "rbac.authorization.k8s.io/v1beta1",
          "kind": "RoleBinding",
          "metadata": {
            "labels": {
              "app": "centraldashboard",
              "app.kubernetes.io/name": "application"
            },
            "name": "centraldashboard",
            "namespace": "kubeflow"
          }
        },
        "ml-pipeline": {
          "apiVersion": "rbac.authorization.k8s.io/v1beta1",
          "kind": "RoleBinding",
          "metadata": {
            "labels": {
              "app": "ml-pipeline",
              "app.kubernetes.io/name": "application"
            },
            "name": "ml-pipeline",
            "namespace": "kubeflow"
          }
        },
        "ml-pipeline-ui": {
          "apiVersion": "rbac.authorization.k8s.io/v1beta1",
          "kind": "RoleBinding",
          "metadata": {
            "labels": {
              "app": "ml-pipeline-ui",
              "app.kubernetes.io/name": "application"
            },
            "name": "ml-pipeline-ui",
            "namespace": "kubeflow"
          }
        }
      },
      "Secret": {
        "mlpipeline-minio-artifact": {
          "apiVersion": "v1",
          "kind": "Secret",
          "metadata": {
            "labels": {
              "app.kubernetes.io/name": "application"
            },
            "name": "mlpipeline-minio-artifact",
            "namespace": "kubeflow"
          }
        }
      },
      "Service": {
        "ambassador": {
          "apiVersion": "v1",
          "kind": "Service",
          "metadata": {
            "labels": {
              "app.kubernetes.io/name": "application",
              "service": "ambassador"
            },
            "name": "ambassador",
            "namespace": "kubeflow"
          }
        },
        "ambassador-admin": {
          "apiVersion": "v1",
          "kind": "Service",
          "metadata": {
            "labels": {
              "app.kubernetes.io/name": "application",
              "service": "ambassador-admin"
            },
            "name": "ambassador-admin",
            "namespace": "kubeflow"
          }
        },
        "argo-ui": {
          "apiVersion": "v1",
          "kind": "Service",
          "metadata": {
            "labels": {
              "app": "argo-ui",
              "app.kubernetes.io/name": "application"
            },
            "name": "argo-ui",
            "namespace": "kubeflow"
          }
        },
        "centraldashboard": {
          "apiVersion": "v1",
          "kind": "Service",
          "metadata": {
            "labels": {
              "app": "centraldashboard",
              "app.kubernetes.io/name": "application"
            },
            "name": "centraldashboard",
            "namespace": "kubeflow"
          }
        },
        "minio-service": {
          "apiVersion": "v1",
          "kind": "Service",
          "metadata": {
            "labels": {
              "app.kubernetes.io/name": "application"
            },
            "name": "minio-service",
            "namespace": "kubeflow"
          }
        },
        "ml-pipeline": {
          "apiVersion": "v1",
          "kind": "Service",
          "metadata": {
            "labels": {
              "app": "ml-pipeline",
              "app.kubernetes.io/name": "application"
            },
            "name": "ml-pipeline",
            "namespace": "kubeflow"
          }
        },
        "ml-pipeline-tensorboard-ui": {
          "apiVersion": "v1",
          "kind": "Service",
          "metadata": {
            "labels": {
              "app": "ml-pipeline-tensorboard-ui",
              "app.kubernetes.io/name": "application"
            },
            "name": "ml-pipeline-tensorboard-ui",
            "namespace": "kubeflow"
          }
        },
        "ml-pipeline-ui": {
          "apiVersion": "v1",
          "kind": "Service",
          "metadata": {
            "labels": {
              "app": "ml-pipeline-ui",
              "app.kubernetes.io/name": "application"
            },
            "name": "ml-pipeline-ui",
            "namespace": "kubeflow"
          }
        },
        "mysql": {
          "apiVersion": "v1",
          "kind": "Service",
          "metadata": {
            "labels": {
              "app.kubernetes.io/name": "application"
            },
            "name": "mysql",
            "namespace": "kubeflow"
          }
        },
        "tf-job-dashboard": {
          "apiVersion": "v1",
          "kind": "Service",
          "metadata": {
            "labels": {
              "app.kubernetes.io/name": "application"
            },
            "name": "tf-job-dashboard",
            "namespace": "kubeflow"
          }
        }
      },
      "ServiceAccount": {
        "ambassador": {
          "apiVersion": "v1",
          "kind": "ServiceAccount",
          "metadata": {
            "labels": {
              "app.kubernetes.io/name": "application"
            },
            "name": "ambassador",
            "namespace": "kubeflow"
          }
        },
        "argo": {
          "apiVersion": "v1",
          "kind": "ServiceAccount",
          "metadata": {
            "labels": {
              "app.kubernetes.io/name": "application"
            },
            "name": "argo",
            "namespace": "kubeflow"
          }
        },
        "argo-ui": {
          "apiVersion": "v1",
          "kind": "ServiceAccount",
          "metadata": {
            "labels": {
              "app.kubernetes.io/name": "application"
            },
            "name": "argo-ui",
            "namespace": "kubeflow"
          }
        },
        "centraldashboard": {
          "apiVersion": "v1",
          "kind": "ServiceAccount",
          "metadata": {
            "labels": {
              "app.kubernetes.io/name": "application"
            },
            "name": "centraldashboard",
            "namespace": "kubeflow"
          }
        },
        "ml-pipeline": {
          "apiVersion": "v1",
          "kind": "ServiceAccount",
          "metadata": {
            "labels": {
              "app.kubernetes.io/name": "application"
            },
            "name": "ml-pipeline",
            "namespace": "kubeflow"
          }
        },
        "ml-pipeline-persistenceagent": {
          "apiVersion": "v1",
          "kind": "ServiceAccount",
          "metadata": {
            "labels": {
              "app.kubernetes.io/name": "application"
            },
            "name": "ml-pipeline-persistenceagent",
            "namespace": "kubeflow"
          }
        },
        "ml-pipeline-scheduledworkflow": {
          "apiVersion": "v1",
          "kind": "ServiceAccount",
          "metadata": {
            "labels": {
              "app.kubernetes.io/name": "application"
            },
            "name": "ml-pipeline-scheduledworkflow",
            "namespace": "kubeflow"
          }
        },
        "ml-pipeline-ui": {
          "apiVersion": "v1",
          "kind": "ServiceAccount",
          "metadata": {
            "labels": {
              "app.kubernetes.io/name": "application"
            },
            "name": "ml-pipeline-ui",
            "namespace": "kubeflow"
          }
        },
        "ml-pipeline-viewer-crd-service-account": {
          "apiVersion": "v1",
          "kind": "ServiceAccount",
          "metadata": {
            "labels": {
              "app.kubernetes.io/name": "application"
            },
            "name": "ml-pipeline-viewer-crd-service-account",
            "namespace": "kubeflow"
          }
        },
        "pipeline-runner": {
          "apiVersion": "v1",
          "kind": "ServiceAccount",
          "metadata": {
            "labels": {
              "app.kubernetes.io/name": "application"
            },
            "name": "pipeline-runner",
            "namespace": "kubeflow"
          }
        },
        "pytorch-operator": {
          "apiVersion": "v1",
          "kind": "ServiceAccount",
          "metadata": {
            "labels": {
              "app": "pytorch-operator",
              "app.kubernetes.io/name": "application"
            },
            "name": "pytorch-operator",
            "namespace": "kubeflow"
          }
        },
        "tf-job-dashboard": {
          "apiVersion": "v1",
          "kind": "ServiceAccount",
          "metadata": {
            "labels": {
              "app": "tf-job-dashboard",
              "app.kubernetes.io/name": "application"
            },
            "name": "tf-job-dashboard",
            "namespace": "kubeflow"
          }
        },
        "tf-job-operator": {
          "apiVersion": "v1",
          "kind": "ServiceAccount",
          "metadata": {
            "labels": {
              "app": "tf-job-operator",
              "app.kubernetes.io/name": "application"
            },
            "name": "tf-job-operator",
            "namespace": "kubeflow"
          }
        }
      }
    },
      local expectedChildren = util.sort(std.filter(util.validateResource, children), util.comparator),
      local createdChildren =
        std.flattenArrays(std.map(util.extractResources, util.extractGroups(request.children))),
      local groupedCreatedChildren = util.groupByResource(createdChildren),
      local foundChildren = std.filterMap(util.curryResources(groupedResources, true),
          util.getApiVersionKindAndMetadata, createdChildren),
      local missingChildren = std.filter(util.curryResources(groupedCreatedChildren, false), expectedChildren),
      local assemblyPhase = {
        return::
          if std.length(foundChildren) >= std.length(expectedChildren) then
            "Succeeded"
          else
            "Pending",
      }.return,
      local info(resource) = {
        return::
          util.lower(resource.kind) + "s." + resource.apiVersion + "/" + resource.metadata.name,
      }.return,
      local emitExtendedInfo = {
        return::
          if extendedInfo == true then {
            expected: std.sort(std.map(info, expectedChildren)),
            created: std.sort(std.map(info, createdChildren)),
            found: std.sort(std.map(info, foundChildren)),
            missing: std.sort(std.map(info, missingChildren)),
            counts: {
              created_children: std.length(createdChildren),
              expected_children: std.length(expectedChildren),
              found_children: std.length(foundChildren),
              missing_children: std.length(missingChildren),
            },
          },
      }.return,
      children: foundChildren,
      status: {
        assemblyPhase: assemblyPhase,
        ready: "True",
        created: true,
        info: emitExtendedInfo,
      },
    }
  util.libsonnet: |
    // Some useful routines.
    {
      local k = import "k.libsonnet",
      local util = self,

      // Convert a string to lower case.
      lower:: function(x) {
        local cp(c) = std.codepoint(c),
        local lowerLetter(c) = if cp(c) >= 65 && cp(c) < 91 then
          std.char(cp(c) + 32)
        else c,
        result:: std.join("", std.map(lowerLetter, std.stringChars(x))),
      }.result,

      // Convert non-boolean types like string,number to a boolean.
      // This is primarily intended for dealing with parameters that should be booleans.
      toBool:: function(x) {
        result::
          if std.type(x) == "boolean" then
            x
          else if std.type(x) == "string" then
            std.asciiUpper(x) == "TRUE"
          else if std.type(x) == "number" then
            x != 0
          else
            false,
      }.result,

      // Convert a comma-delimited string to an Array
      toArray:: function(str) {
        local trim(str) = {
          rest::
            if std.startsWith(str, " ") then
              std.substr(str, 1, std.length(str) - 1)
            else
              str,
        }.rest,
        result::
          if std.type(str) == "string" && str != "null" && std.length(str) > 0 then
            std.map(trim, std.split(str, ","))
          else [],
      }.result,

      foldl:: function(key, value, objs) {
        local aux(arr, i, running) =
          if i >= std.length(arr) then
            running
          else
            aux(arr, i + 1, running { [key(arr[i])]+: value(arr[i]) }) tailstrict,
        return:: aux(objs, 0, {},),
      }.return,

      sort:: function(arr, compare=function(a, b) {
        return::
          if a == b then
            0
          else
            if a < b then
              -1
            else
              1,
      }.return) {
        local _sort(arr, compare) = {
          local l = std.length(arr),
          local f = {
            local pivot = arr[0],
            local rest = std.makeArray(l - 1, function(i) arr[i + 1]),
            local lessorequal(x) = compare(x, pivot) <= 0,
            local greater(x) = compare(x, pivot) > 0,
            local left = _sort(std.filter(lessorequal, rest), compare) tailstrict,
            local right = _sort(std.filter(greater, rest), compare) tailstrict,
            return:: left + [pivot] + right,
          }.return,
          return::
            if l == 0 then
              []
            else
              f,
        }.return,
        return:: _sort(arr, compare),
      }.return,

      setDiff:: function(a, b, compare=function(a, b) {
        return::
          if a == b then
            0
          else if a < b then
            -1
          else
            1,
      }.return) {
        local aux(a, b, i, j, acc) =
          if i >= std.length(a) then
            acc
          else
            if j >= std.length(b) then
              aux(a, b, i + 1, j, acc + [a[i]]) tailstrict
            else
              if compare(a[i], b[j]) == 0 then
                aux(a, b, i + 1, j + 1, acc) tailstrict
              else
                if compare(a[i], b[j]) == -1 then
                  aux(a, b, i + 1, j, acc + [a[i]]) tailstrict
                else
                  aux(a, b, i, j + 1, acc) tailstrict,
        return:: aux(a, b, 0, 0, []) tailstrict,
      }.return,

      getApiVersionKindAndMetadata(resource):: {
        return::
          if std.objectHas(resource.metadata, "resourceVersion") then {
            apiVersion: resource.apiVersion,
            kind: resource.kind,
            metadata: {
              labels: resource.metadata.labels,
              name: resource.metadata.name,
              namespace: resource.metadata.namespace,
              resourceVersion: resource.metadata.resourceVersion,
            }
          } else {
            apiVersion: resource.apiVersion,
            kind: resource.kind,
            metadata: {
              labels: resource.metadata.labels,
              name: resource.metadata.name,
              namespace: resource.metadata.namespace,
            },
          },
      }.return,

      groupByResource(resources):: {
        local getKey(resource) = {
          return::
            resource.kind,
        }.return,
        local getValue(resource) = {
          return::
            { [resource.metadata.name]+: resource },
        }.return,
        return:: util.foldl(getKey, getValue, resources),
      }.return,

      comparator(a, b):: {
        return::
          if a.metadata.name == b.metadata.name then
            0
          else
            if a.metadata.name < b.metadata.name then
              -1
            else
              1,
      }.return,

      validateResource(resource):: {
        return::
          if std.type(resource) == "object" &&
             std.objectHas(resource, "kind") &&
             std.objectHas(resource, "apiVersion") &&
             std.objectHas(resource, "metadata") &&
             std.objectHas(resource.metadata, "name") then
            true
          else
            false,
      }.return,

      extractGroups(obj)::
        if std.type(obj) == "object" then
          [obj[key] for key in std.objectFields(obj)]
        else
          [],

      extractResources(group)::
        if std.type(group) == "object" then
          [group[key] for key in std.objectFields(group)]
        else
          [],

      curryResources(resources, exists):: {
        local existingResource(resource) = {
          local resourceExists(kind, name) = {
            return::
              if std.objectHas(resources, kind) &&
                 std.objectHas(resources[kind], name) then
                true
              else
                false,
          }.return,
          return::
            if util.validateResource(resource) then
              resourceExists(resource.kind, resource.metadata.name)
            else
              false,
        }.return,
        local missingResource(resource) = {
          return::
            existingResource(resource) == false,
        }.return,
        return::
          if exists == true then
            existingResource
          else
            missingResource,
      }.return,

      // Produce a list of manifests. obj must be an array
      list(obj):: k.core.v1.list.new(obj,),
    }
kind: ConfigMap
metadata:
  name: application-controller-hooks
---
apiVersion: v1
kind: Service
metadata:
  name: application-controller
spec:
  ports:
  - port: 80
    targetPort: 8080
  selector:
    app: application-controller
---
apiVersion: apps/v1beta1
kind: Deployment
metadata:
  name: application-controller
spec:
  selector:
    matchLabels:
      app: application-controller
  template:
    metadata:
      labels:
        app: application-controller
    spec:
      containers:
      - image: metacontroller/jsonnetd@sha256:25c25f217ad030a0f67e37078c33194785b494569b0c088d8df4f00da8fd15a0
        imagePullPolicy: Always
        name: hooks
        volumeMounts:
        - mountPath: /opt/isolation/operator/hooks
          name: hooks
        workingDir: /opt/isolation/operator/hooks
      volumes:
      - configMap:
          name: application-controller-hooks
        name: hooks
