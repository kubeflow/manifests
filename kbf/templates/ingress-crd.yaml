apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  name: ingresses.networking.internal.knative.dev
  labels:
    app.kubernetes.io/component: networking
    knative.dev/crd-install: "true"
  {{- include "kbf.labels" . | nindent 4 }}
spec:
  group: networking.internal.knative.dev
  names:
    categories:
    - knative-internal
    - networking
    kind: Ingress
    plural: ingresses
    shortNames:
    - kingress
    - king
    singular: ingress
  scope: Namespaced
  versions:
  - additionalPrinterColumns:
    - jsonPath: .status.conditions[?(@.type=='Ready')].status
      name: Ready
      type: string
    - jsonPath: .status.conditions[?(@.type=='Ready')].reason
      name: Reason
      type: string
    name: v1alpha1
    schema:
      openAPIV3Schema:
        description: "Ingress is a collection of rules that allow inbound connections
          to reach the endpoints defined by a backend. An Ingress can be configured
          to give services externally-reachable URLs, load balance traffic, offer name
          based virtual hosting, etc. \n This is heavily based on K8s Ingress https://godoc.org/k8s.io/api/networking/v1beta1#Ingress
          which some highlighted modifications."
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation
              of an object. Servers should convert recognized schemas to the latest
              internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this
              object represents. Servers may infer this from the endpoint the client
              submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          spec:
            description: 'Spec is the desired state of the Ingress. More info: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#spec-and-status'
            properties:
              httpOption:
                description: 'HTTPOption is the option of HTTP. It has the following
                  two values: `HTTPOptionEnabled`, `HTTPOptionRedirected`'
                type: string
              rules:
                description: A list of host rules used to configure the Ingress.
                items:
                  description: IngressRule represents the rules mapping the paths under
                    a specified host to the related backend services. Incoming requests
                    are first evaluated for a host match, then routed to the backend
                    associated with the matching IngressRuleValue.
                  properties:
                    hosts:
                      description: 'Host is the fully qualified domain name of a network
                        host, as defined by RFC 3986. Note the following deviations
                        from the "host" part of the URI as defined in the RFC: 1. IPs
                        are not allowed. Currently a rule value can only apply to the
                        IP in the Spec of the parent . 2. The `:` delimiter is not respected
                        because ports are not allowed. Currently the port of an Ingress
                        is implicitly :80 for http and :443 for https. Both these may
                        change in the future. If the host is unspecified, the Ingress
                        routes all traffic based on the specified IngressRuleValue.
                        If multiple matching Hosts were provided, the first rule will
                        take precedent.'
                      items:
                        type: string
                      type: array
                    http:
                      description: HTTP represents a rule to apply against incoming
                        requests. If the rule is satisfied, the request is routed to
                        the specified backend.
                      properties:
                        paths:
                          description: "A collection of paths that map requests to backends.
                            \n If they are multiple matching paths, the first match
                            takes precedence."
                          items:
                            description: HTTPIngressPath associates a path regex with
                              a backend. Incoming URLs matching the path are forwarded
                              to the backend.
                            properties:
                              appendHeaders:
                                additionalProperties:
                                  type: string
                                description: "AppendHeaders allow specifying additional
                                  HTTP headers to add before forwarding a request to
                                  the destination service. \n NOTE: This differs from
                                  K8s Ingress which doesn't allow header appending."
                                type: object
                              headers:
                                additionalProperties:
                                  description: HeaderMatch represents a matching value
                                    of Headers in HTTPIngressPath. Currently, only the
                                    exact matching is supported.
                                  properties:
                                    exact:
                                      type: string
                                  required:
                                  - exact
                                  type: object
                                description: Headers defines header matching rules which
                                  is a map from a header name to HeaderMatch which specify
                                  a matching condition. When a request matched with
                                  all the header matching rules, the request is routed
                                  by the corresponding ingress rule. If it is empty,
                                  the headers are not used for matching
                                type: object
                              path:
                                description: Path represents a literal prefix to which
                                  this rule should apply. Currently it can contain characters
                                  disallowed from the conventional "path" part of a
                                  URL as defined by RFC 3986. Paths must begin with
                                  a '/'. If unspecified, the path defaults to a catch
                                  all sending traffic to the backend.
                                type: string
                              rewriteHost:
                                description: "RewriteHost rewrites the incoming request's
                                  host header. \n This field is currently experimental
                                  and not supported by all Ingress implementations."
                                type: string
                              splits:
                                description: Splits defines the referenced service endpoints
                                  to which the traffic will be forwarded to.
                                items:
                                  description: IngressBackendSplit describes all endpoints
                                    for a given service and port.
                                  properties:
                                    appendHeaders:
                                      additionalProperties:
                                        type: string
                                      description: "AppendHeaders allow specifying additional
                                        HTTP headers to add before forwarding a request
                                        to the destination service. \n NOTE: This differs
                                        from K8s Ingress which doesn't allow header
                                        appending."
                                      type: object
                                    percent:
                                      description: "Specifies the split percentage,
                                        a number between 0 and 100.  If only one split
                                        is specified, we default to 100. \n NOTE: This
                                        differs from K8s Ingress to allow percentage
                                        split."
                                      type: integer
                                    serviceName:
                                      description: Specifies the name of the referenced
                                        service.
                                      type: string
                                    serviceNamespace:
                                      description: "Specifies the namespace of the referenced
                                        service. \n NOTE: This differs from K8s Ingress
                                        to allow routing to different namespaces."
                                      type: string
                                    servicePort:
                                      anyOf:
                                      - type: integer
                                      - type: string
                                      description: Specifies the port of the referenced
                                        service.
                                      x-kubernetes-int-or-string: true
                                  required:
                                  - serviceName
                                  - serviceNamespace
                                  - servicePort
                                  type: object
                                type: array
                            required:
                            - splits
                            type: object
                          type: array
                      required:
                      - paths
                      type: object
                    visibility:
                      description: Visibility signifies whether this rule should `ClusterLocal`.
                        If it's not specified then it defaults to `ExternalIP`.
                      type: string
                  type: object
                type: array
              tls:
                description: 'TLS configuration. Currently Ingress only supports a single
                  TLS port: 443. If multiple members of this list specify different
                  hosts, they will be multiplexed on the same port according to the
                  hostname specified through the SNI TLS extension, if the ingress controller
                  fulfilling the ingress supports SNI.'
                items:
                  description: IngressTLS describes the transport layer security associated
                    with an Ingress.
                  properties:
                    hosts:
                      description: Hosts is a list of hosts included in the TLS certificate.
                        The values in this list must match the name/s used in the tlsSecret.
                        Defaults to the wildcard host setting for the loadbalancer controller
                        fulfilling this Ingress, if left unspecified.
                      items:
                        type: string
                      type: array
                    secretName:
                      description: SecretName is the name of the secret used to terminate
                        SSL traffic.
                      type: string
                    secretNamespace:
                      description: SecretNamespace is the namespace of the secret used
                        to terminate SSL traffic. If not set the namespace should be
                        assumed to be the same as the Ingress. If set the secret should
                        have the same namespace as the Ingress otherwise the behaviour
                        is undefined and not supported.
                      type: string
                  type: object
                type: array
            type: object
          status:
            description: 'Status is the current state of the Ingress. More info: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#spec-and-status'
            properties:
              annotations:
                additionalProperties:
                  type: string
                description: Annotations is additional Status fields for the Resource
                  to save some additional State as well as convey more information to
                  the user. This is roughly akin to Annotations on any k8s resource,
                  just the reconciler conveying richer information outwards.
                type: object
              conditions:
                description: Conditions the latest available observations of a resource's
                  current state.
                items:
                  description: 'Condition defines a readiness condition for a Knative
                    resource. See: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#typical-status-properties'
                  properties:
                    lastTransitionTime:
                      description: LastTransitionTime is the last time the condition
                        transitioned from one status to another. We use VolatileTime
                        in place of metav1.Time to exclude this from creating equality.Semantic
                        differences (all other things held constant).
                      type: string
                    message:
                      description: A human readable message indicating details about
                        the transition.
                      type: string
                    reason:
                      description: The reason for the condition's last transition.
                      type: string
                    severity:
                      description: Severity with which to treat failures of this type
                        of condition. When this is not specified, it defaults to Error.
                      type: string
                    status:
                      description: Status of the condition, one of True, False, Unknown.
                      type: string
                    type:
                      description: Type of condition.
                      type: string
                  required:
                  - status
                  - type
                  type: object
                type: array
              observedGeneration:
                description: ObservedGeneration is the 'Generation' of the Service that
                  was last processed by the controller.
                format: int64
                type: integer
              privateLoadBalancer:
                description: PrivateLoadBalancer contains the current status of the
                  load-balancer.
                properties:
                  ingress:
                    description: Ingress is a list containing ingress points for the
                      load-balancer. Traffic intended for the service should be sent
                      to these ingress points.
                    items:
                      description: 'LoadBalancerIngressStatus represents the status
                        of a load-balancer ingress point: traffic intended for the service
                        should be sent to an ingress point.'
                      properties:
                        domain:
                          description: Domain is set for load-balancer ingress points
                            that are DNS based (typically AWS load-balancers)
                          type: string
                        domainInternal:
                          description: "DomainInternal is set if there is a cluster-local
                            DNS name to access the Ingress. \n NOTE: This differs from
                            K8s Ingress, since we also desire to have a cluster-local
                            DNS name to allow routing in case of not having a mesh."
                          type: string
                        ip:
                          description: IP is set for load-balancer ingress points that
                            are IP based (typically GCE or OpenStack load-balancers)
                          type: string
                        meshOnly:
                          description: MeshOnly is set if the Ingress is only load-balanced
                            through a Service mesh.
                          type: boolean
                      type: object
                    type: array
                type: object
              publicLoadBalancer:
                description: PublicLoadBalancer contains the current status of the load-balancer.
                properties:
                  ingress:
                    description: Ingress is a list containing ingress points for the
                      load-balancer. Traffic intended for the service should be sent
                      to these ingress points.
                    items:
                      description: 'LoadBalancerIngressStatus represents the status
                        of a load-balancer ingress point: traffic intended for the service
                        should be sent to an ingress point.'
                      properties:
                        domain:
                          description: Domain is set for load-balancer ingress points
                            that are DNS based (typically AWS load-balancers)
                          type: string
                        domainInternal:
                          description: "DomainInternal is set if there is a cluster-local
                            DNS name to access the Ingress. \n NOTE: This differs from
                            K8s Ingress, since we also desire to have a cluster-local
                            DNS name to allow routing in case of not having a mesh."
                          type: string
                        ip:
                          description: IP is set for load-balancer ingress points that
                            are IP based (typically GCE or OpenStack load-balancers)
                          type: string
                        meshOnly:
                          description: MeshOnly is set if the Ingress is only load-balanced
                            through a Service mesh.
                          type: boolean
                      type: object
                    type: array
                type: object
            type: object
        type: object
    served: true
    storage: true
    subresources:
      status: {}
status:
  acceptedNames:
    kind: ""
    plural: ""
  conditions: []
  storedVersions: []