name: Test Istio Ambient Mode

on:
  pull_request:
    paths:
    - tests/install_KinD_create_KinD_cluster_install_kustomize.sh
    - tests/istio*
    - tests/ambient*
    - .github/workflows/istio_ambient_test.yaml
    - common/istio/istio-install/overlays/ambient/**
    - common/istio/istio-install/overlays/ambient-oauth2-proxy/**
    - common/istio/istio-install/components/ambient-mode/**
    - common/istio/**
    - common/cert-manager/**

permissions:
  contents: read
  actions: read

env:
  KF_PROFILE: kubeflow-user-example-com

jobs:
  test-ambient:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Install KinD, Create KinD cluster and Install kustomize
      run: ./tests/install_KinD_create_KinD_cluster_install_kustomize.sh

    - name: Install kubectl
      run: ./tests/kubectl_install.sh

    - name: Create Kubeflow Namespace
      run: kustomize build common/kubeflow-namespace/base | kubectl apply -f -

    - name: Install Certificate Manager
      run: ./tests/cert_manager_install.sh

    - name: Install Istio Ambient Mode
      run: |
        kustomize build common/istio/istio-crds/base | kubectl apply -f -
        kustomize build common/istio/istio-namespace/base | kubectl apply -f -
        kustomize build common/istio/istio-install/overlays/ambient | kubectl apply -f -
        kubectl wait --for=condition=Ready pods --all -n istio-system --timeout 300s

    - name: Wait for Istio deployment
      run: |
        kubectl wait --for=condition=available --timeout=300s deployment/istiod -n istio-system
        kubectl get pods -n istio-system

    - name: Verify Ambient Mode Installation
      run: |
        kubectl get daemonset ztunnel -n istio-system
        kubectl rollout status daemonset/ztunnel -n istio-system --timeout=120s

        PILOT_ENABLE_AMBIENT=$(kubectl get deployment istiod -n istio-system -o jsonpath='{.spec.template.spec.containers[0].env[?(@.name=="PILOT_ENABLE_AMBIENT")].value}')
        if [ "$PILOT_ENABLE_AMBIENT" != "true" ]; then
          echo "ERROR: PILOT_ENABLE_AMBIENT should be true, got: $PILOT_ENABLE_AMBIENT"
          exit 1
        fi
        echo "Ambient mode enabled in istiod"

        kubectl get daemonset istio-cni-node -n kube-system
        kubectl rollout status daemonset/istio-cni-node -n kube-system --timeout=120s
        echo "CNI installed"

    - name: Install OAuth2 Proxy
      run: ./tests/oauth2-proxy_install.sh

    - name: Install Kubeflow Istio Resources
      run: kustomize build common/istio/kubeflow-istio-resources/base | kubectl apply -f -

    - name: Install Multi-Tenancy
      run: ./tests/multi_tenancy_install.sh

    - name: Create KF Profile
      run: ./tests/kubeflow_profile_install.sh

    - name: Verify namespace has ambient label
      run: |
        AMBIENT_LABEL=$(kubectl get namespace $KF_PROFILE -o jsonpath='{.metadata.labels.istio\.io/dataplane-mode}')
        if [ "$AMBIENT_LABEL" != "ambient" ]; then
          echo "ERROR: Namespace should have istio.io/dataplane-mode=ambient label, got: $AMBIENT_LABEL"
          kubectl get namespace $KF_PROFILE --show-labels
          exit 1
        fi
        echo "Namespace labeled for ambient mode"

    - name: Test application without sidecar
      run: |
        kubectl apply -f ./tests/istio_dummy_deployment.yaml -n $KF_PROFILE
        kubectl wait --for=condition=available --timeout=160s deployment/test-application -n $KF_PROFILE

        POD_NAME=$(kubectl get pods -n $KF_PROFILE -l app=test-application -o jsonpath='{.items[0].metadata.name}')

        CONTAINER_COUNT=$(kubectl get pod $POD_NAME -n $KF_PROFILE -o jsonpath='{.spec.containers[*].name}' | wc -w)
        if [ "$CONTAINER_COUNT" -ne "1" ]; then
          echo "ERROR: Pod should have only 1 container in ambient mode, found: $CONTAINER_COUNT"
          kubectl get pod $POD_NAME -n $KF_PROFILE -o jsonpath='{.spec.containers[*].name}'
          exit 1
        fi
        echo "No sidecar injected (ambient mode is sidecar-free)"

    - name: Test L4 connectivity via ztunnel
      run: |
        kubectl expose deployment test-application --port=80 --target-port=8080 -n $KF_PROFILE

        kubectl run test-client --image=busybox --rm -i --restart=Never -n $KF_PROFILE -- \
          wget -qO- --timeout=10 test-application.$KF_PROFILE.svc.cluster.local

        echo "L4 connectivity working through ztunnel"

    - name: Verify ztunnel logs show traffic handling
      run: |
        kubectl logs -n istio-system daemonset/ztunnel --tail=50 | grep -i "connection\|proxy" || echo "ztunnel logs (last 50 lines):"
        kubectl logs -n istio-system daemonset/ztunnel --tail=50

    - name: Apply Pod Security Standards Restricted levels
      run: ./tests/PSS_enable.sh

    - name: Collect debug information on failure
      if: failure()
      run: |
        echo "=== Istio System Pods ==="
        kubectl get pods -n istio-system -o wide

        echo "=== Istiod Logs (last 50 lines) ==="
        kubectl logs -n istio-system deployment/istiod --tail=50 || true

        echo "=== Istiod Environment Variables ==="
        kubectl get deployment istiod -n istio-system -o jsonpath='{.spec.template.spec.containers[0].env}' | jq . || true

        echo "=== Ztunnel DaemonSet Status ==="
        kubectl get daemonset ztunnel -n istio-system || true
        kubectl logs -n istio-system daemonset/ztunnel --tail=50 || true

        echo "=== CNI Daemonset Status ==="
        kubectl get daemonset istio-cni-node -n kube-system || true
        kubectl logs -n kube-system daemonset/istio-cni-node --tail=20 || true

        echo "=== Namespace Labels ==="
        kubectl get namespace $KF_PROFILE --show-labels || true

        echo "=== Test Application Pods ==="
        kubectl get pods -n $KF_PROFILE -o wide || true
        kubectl describe pod -n $KF_PROFILE -l app=test-application || true

        echo "=== ReplicaSet Events ==="
        kubectl get replicaset -n $KF_PROFILE || true
        kubectl describe replicaset -n $KF_PROFILE || true
